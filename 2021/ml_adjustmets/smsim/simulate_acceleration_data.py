from numpy import arange, array, random, where, reshape, log10
from os import system, path
from misc_tools import listdir_extension
from mag_tools import nsha18_fixed_bilin_ml2mw
from obspy import Trace

def read_smc_file(acc_file):
    # reads the "smc" file (synthetic accelerogram generated by smsim)
    # outputs the displacement as obspy trace object in cm format

    f = open(acc_file, 'r')
    lines = f.readlines()[40:]
    f.close()
    
    acc = []
    for ln in lines:
        for i in range(0, int(len(ln)/10)):
            acc.append(float(ln[10*i:10*(i + 1)]))
        
    acc = array(acc)
    l = len(acc) * 8
    #acc = reshape(acc, (1, l))[0]

    acc_tr = Trace()
    acc_tr.data = acc # in cm
    acc_tr.stats.sampling_rate = 100.
    acc_tr.stats.delta = 0.01

    vel_trace = acc_tr.copy().integrate() # in cm/s
    
    # get max vel
    pgv = max(abs(vel_trace.data)) 
    return vel_trace, pgv

def get_wa_amp(displacement_trace):

    # claculate the displacement amplitude from Wood-Anderson seismometer

    paz_wa = {'sensitivity': 2080, 'zeros': [0j, 0j], 'gain': 1,
              'poles': [-6.2832 - 4.7124j, -6.2832 + 4.7124j]}
    disp_wa = displacement_trace.copy().simulate(paz_remove=None,
                                                 paz_simulate=paz_wa, water_level=10)

    ampl = max(abs(disp_wa.data))

    # estimate ML using Michael-Leiba and Malafant (1992) formula

    #local_mag = np.log10(ampl * 1000) + \
    #     1.34 * np.log10(hypo_dist / 100.) + 0.00055 * (hypo_dist - 100.) + 3.0

    # estimate ML using Bakun and Joyner (1984) formula

    # local_mag = np.log10(ampl * 1000) + \
    #             np.log10(hypo_dist) + 0.00301 * (hypo_dist) + 0.70

    return ampl * 1000.


# mag range to loop through
mags = arange(2., 5.55, 0.05)

# set mag-distance limits
ml_lims = array([4., 4.5, 5.])
mw_lims = []
for ml in ml_lims:
    mw_lims.append(nsha18_fixed_bilin_ml2mw(ml)[0])

dists = arange(10, 501, 10)

# read base ctrl
lines = open('allen07_a_ts_drvr_base.ctl').readlines()

"""
# now loop through magnitudes
for ml, mw in zip(ml_lims, mw_lims):
    
    # loop through dists
    for d in dists:
    
        # do 10 sims with each mag and dist
        for i in range(0,10):
            # now, write ctrl file
            lines[8] = '  simulations/m'+str('%0.2f' % ml)+'r'+str('%0.0f' % d)+'s'+str(i)+'_\n'
            lines[10] = '  '+str('%0.2f' % mw)+' '+str('%0.1f' % d) + '\n'
            
            # write ctrl file
            f = open('allen07_a_ts_drvr.ctl', 'w')
            f.writelines(lines)
            f.close()
            
            # now call smsim
            system('./a_ts_drvr_mod')
"""        
################################################################################
# get PGV data
################################################################################

smcfiles = listdir_extension('simulations', 'smc')

wa_amp = []
data = 'MAG,DIST,PGV (cm/s)\n'
for smcfile in smcfiles:
    # get mag-dist from filename
    m = smcfile[1:5]
    r = smcfile.split('r')[-1].split('_')[0].split('s')[0]
    
    vel_trace, pgv = read_smc_file(path.join('simulations',smcfile)) # in m
    
    
    #wa_amp = get_wa_amp(disp_trace)                
    
    # add random Gaussian to WA amps                               
    rand_gaus = random.normal(loc=0., scale=0.25, size=1)
    rand_pgv = 10**(log10(pgv) + rand_gaus[0])                     
    
    data += ','.join((m, r, str(rand_pgv))) + '\n'
    
f = open('simulated_pgv.csv', 'w')
f.write(data)
f.close()
    