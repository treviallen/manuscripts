from numpy import arange, array, random, where, reshape, log10, around, delete
from os import system, path
from misc_tools import listdir_extension
from obspy import Trace

# run smsim
def run_smsim(m, d):
    # read base ctrl
    lines = open('allen07_a_ts_drvr_base.ctl').readlines()

    # now, write ctrl file
    lines[8] = '  simulations/m'+str('%0.2f' % m)+'r'+str('%0.1f' % d)+'_\n'
    lines[10] = '  '+str('%0.2f' % m)+' '+str('%0.1f' % d) + '\n'
    
    # write ctrl file
    f = open('allen07_a_ts_drvr.ctl', 'w')
    f.writelines(lines)
    f.close()
    
    # now call smsim
    system('./a_ts_drvr_mod')
    
def read_smc_file(acc_file):
    # reads the "smc" file (synthetic accelerogram generated by smsim)
    # outputs the displacement as obspy trace object in SI format (meters)

    f = open(acc_file, 'r')
    lines = f.readlines()[40:]
    f.close()
    
    acc = []
    for ln in lines:
        for i in range(0, int(len(ln)/10)):
            acc.append(float(ln[10*i:10*(i + 1)]))
        
    acc = array(acc)
    l = len(acc) * 8
    #acc = reshape(acc, (1, l))[0]

    acc_tr = Trace()
    acc_tr.data = acc / 100.
    acc_tr.stats.sampling_rate = 100.
    acc_tr.stats.delta = 0.01

    disp_trace = acc_tr.copy().integrate().integrate()
    return disp_trace

def get_wa_amp(displacement_trace):

    # claculate the displacement amplitude from Wood-Anderson seismometer

    paz_wa = {'sensitivity': 2080, 'zeros': [0j, 0j], 'gain': 1,
              'poles': [-6.2832 - 4.7124j, -6.2832 + 4.7124j]}
    disp_wa = displacement_trace.copy().simulate(paz_remove=None,
                                                 paz_simulate=paz_wa, water_level=10)

    ampl = max(abs(disp_wa.data))

    # estimate ML using Michael-Leiba and Malafant (1992) formula

    #local_mag = np.log10(ampl * 1000) + \
    #     1.34 * np.log10(hypo_dist / 100.) + 0.00055 * (hypo_dist - 100.) + 3.0

    # estimate ML using Bakun and Joyner (1984) formula

    # local_mag = np.log10(ampl * 1000) + \
    #             np.log10(hypo_dist) + 0.00301 * (hypo_dist) + 0.70

    return ampl * 1000.

# set random seed
seed = 12345
#seed = 100
rand_seed = random.default_rng(seed)

# get num stations for given mag
def get_nstas(mag, rand_seed):
    import pickle
    numPDF = pickle.load(open("../../b-value_sensitivity_ml/numPDF.pkl", "rb" ))
    
    for npdf in numPDF: 
        if npdf['mmin'] >= mag and npdf['mmax'] < mag:
            #nstas = around(norm.rvs(npdf['mu'], npdf['std'], size=1))
            nstas = around(rand_seed.normal(npdf['mu'], npdf['std'], size=1))

    return nstas
    
# get get distances for given mag and nstas
def get_distances(mag, nstas, rand_seed):
    import pickle
    distPDF = pickle.load(open("../../b-value_sensitivity_ml/distPDF.pkl", "rb" ))
    
    for dpdf in distPDF: 
        if dpdf['mmin'] >= mag and dpdf['mmax'] < mag:
            try:
                #sample_dists = 10**(norm.rvs(dpdf['mu'], dpdf['std'], size=int(nstas)))
                sample_dists = 10**(rand_seed.normal(dpdf['mu'], dpdf['std'], size=int(nstas)))
            except: #try again!
                try:
                    #sample_dists = 10**(norm.rvs(dpdf['mu'], dpdf['std'], size=int(nstas)))
                    sample_dists = 10**(rand_seed.normal(dpdf['mu'], dpdf['std'], size=int(nstas)))
                except: #try again!
                    sample_dists = array([0])

    return sample_dists

################################################################################
# get event data

def get_event_data():
    from os import remove
    
    smcfiles = listdir_extension('simulations', 'smc')
    
    wa_amps = []
    dists = []
    for smcfile in smcfiles:
        # get mag-dist from filename
        m = smcfile[1:5]
        r = smcfile.split('r')[-1].split('_')[0]
        dists.append(float(r))
        
        disp_trace = read_smc_file(path.join('simulations',smcfile)) # in m
        wa_amps.append(get_wa_amp(disp_trace))
        
        '''
        # add random Gaussian to WA amps                               
        rand_gaus = random.normal(loc=0., scale=0.25, size=1)
        wa_amp = 10**(log10(wa_amp) + rand_gaus[0])                     
        
        #data += ','.join((m, r, str(wa_amp))) + '\n'
        '''
        # now remove file
        remove(path.join('simulations',smcfile))
    return wa_amps, dists
  

# mag range to loop through
mags = arange(2., 5.55, 0.05)

# read base ctrl
#lines = open('allen07_a_ts_drvr_base.ctl').readlines()

lines = open('allen07_a_ts_drvr_base_ff_edit.ctl').readlines() # change FF GR to -1.4

events = []
# now loop through magnitudes
for mag in mags:
    # do 10 times/mag
    for i in range(0, 3):
       # first, calculate number of sta
       nstas = 0
       while nstas < 3:
           nstas = get_nstas(mag, rand_seed)
       
       # get sample distances
       sample_dists = get_distances(mag, nstas, rand_seed)
       
       idx = sample_dists > 800.
       sample_dists = delete(sample_dists, idx)
       idx = sample_dists < 10.
       sample_dists = delete(sample_dists, idx)
       
       # loop through near-source dists
       for d in sample_dists:
       
           run_smsim(mag, d)
               
           # get event data
       wa_amps, ev_dists = get_event_data()
       
       events.append({'mw':mag, 'wa_amps':wa_amps, 'dists':ev_dists})
    
    
################################################################################
# get W-A amplitudes
################################################################################

#smcfiles = listdir_extension('simulations', 'smc')

wa_amp = []
data = 'EV,MW,DIST,WA_AMP\n'
for i, event in enumerate(events):
    for j in range(0, len(event['dists'])):
        # add random Gaussian to WA amps                               
        rand_gaus = random.normal(loc=0., scale=0.25, size=1)
        wa_amp = 10**(log10(event['wa_amps'][j]) + rand_gaus[0])                     
        
        data += ','.join((str(i), str(event['mw']), str(event['dists'][j]), str(wa_amp))) + '\n'
    
f = open('simulated_wa_amplitudes.csv', 'w')
f.write(data)
f.close()
    